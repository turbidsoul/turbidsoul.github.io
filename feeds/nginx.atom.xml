<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Turbidsoul's 小黑屋</title><link href="http://blog.turbidsoul.me/" rel="alternate"></link><link href="http://blog.turbidsoul.me/feeds/nginx.atom.xml" rel="self"></link><id>http://blog.turbidsoul.me/</id><updated>2014-01-26T00:00:00+08:00</updated><entry><title>Nginx实现文件下载自动打包成zip文件</title><link href="http://blog.turbidsoul.me/posts/nginxshi-xian-wen-jian-xia-zai-zi-dong-da-bao-cheng-zipwen-jian.html" rel="alternate"></link><updated>2014-01-26T00:00:00+08:00</updated><author><name>Turbidsoul</name></author><id>tag:blog.turbidsoul.me,2014-01-26:posts/nginxshi-xian-wen-jian-xia-zai-zi-dong-da-bao-cheng-zipwen-jian.html</id><summary type="html">&lt;h2&gt;来源和介绍&lt;/h2&gt;
&lt;p&gt;问题的来源是需要对已有的资料在下载的时候进行添加广告，但是对于doc文件操作麻烦的情况，采用在下载的时候将广告文件和资料一起打包成zip文件.&lt;/p&gt;
&lt;p&gt;在apache服务器中有个mod_zip的模块就是完成这个功能，同样nginx有大神已经实现了这个模块，我们只需要拿来用就可以了:&lt;a href="https://github.com/evanmiller/mod_zip"&gt;mod_zip&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;应用&lt;/h2&gt;
&lt;p&gt;此模块并不是nginx的默认模块所以需要用户自己编译安装。&lt;/p&gt;
&lt;p&gt;安装完成之后，不需要修改任何nginx的任何配置，完成打包都在服务点返回的信息中，下面请看我用python实现的示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bottle&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
&lt;span class="nd"&gt;@route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/download&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;download&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;X-Archive-Files&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;zip&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;application/octet-stream&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;X-Accel-Chareset&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Content-Disposition&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;r&amp;quot;attachment; filename*=test.zip&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;618792700 135 /test.lua 4.lua&lt;/span&gt;
&lt;span class="s"&gt;3521768339 2865 /ngx_openresty-1.4.2.8/README 5.txt&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;192.168.1.196&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;9000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reloader&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里需要主意两点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;response.set_header('X-Archive-Files', 'zip') 这一行就是告诉nginx需要打包成zip文件&lt;/li&gt;
&lt;li&gt;就是return返回的那个多行字符串,这里是告诉nginx都要打包那些文件，一行表示一个文件，这里一共四个字段，按顺序依次是 CRC32校验值， 文件大小，源文件路径，打包之后的文件名。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于第二点还需要在说明一下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CRC32的校验值并不是必须的，如果没有可以用'-'代替，但不能什么都不写&lt;/li&gt;
&lt;li&gt;原文件的路径是相对nginx设置的路径的绝对路径，即就是nginx的root设置的路径，如果没有设置那就是/*/nginx/html这个路径。&lt;/li&gt;
&lt;li&gt;nginx中设置root的时候需要把放置在location外面，放置里面是无法生效的。&lt;/li&gt;
&lt;li&gt;如果源文件的路径是错误的，那么会产生一个404错误或者下载下来的文件无法解压的损坏文件。&lt;/li&gt;
&lt;/ul&gt;</summary><category term="nginx"></category><category term="python"></category></entry><entry><title>如何配置在nginx和cas上配置ssl？</title><link href="http://blog.turbidsoul.me/posts/ru-he-pei-zhi-zai-nginxhe-casshang-pei-zhi-ssl.html" rel="alternate"></link><updated>2013-05-08T00:00:00+08:00</updated><author><name>Turbidsoul Chan</name></author><id>tag:blog.turbidsoul.me,2013-05-08:posts/ru-he-pei-zhi-zai-nginxhe-casshang-pei-zhi-ssl.html</id><summary type="html">&lt;p&gt;公司准备对登录服务采用https，而登录服务采用的是cas，前段的是用nginx代理， 所以就有了之后的几个问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;主要碰到了下面3个问题&lt;/strong&gt; ：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;nginx中配置ssl&lt;/li&gt;
&lt;li&gt;cas中开启ssl&lt;/li&gt;
&lt;li&gt;java中导入证书&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;p&gt;首先是生成我们的证书，我使用的是openssl：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先是生成私钥： openssl genrsa -out server.key&lt;/li&gt;
&lt;li&gt;接下来要生成CSR文件： openssl req -new -key server.key -out server.csr&lt;/li&gt;
&lt;li&gt;最后就是生成证书文件： openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这里有我一个笔记是openssl的简单教程：&lt;a href="https://www.evernote.com/shard/s25/sh/233c0eda-2f70-4756-8907-50dc0bff82c2/92861a2bd473f1d703bcead620080d27"&gt;openssl简单教程&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;生成证书后，就可以配置nginx了，打开nginx.conf，加入以下几行:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;listen&lt;/span&gt;                 &lt;span class="mi"&gt;443&lt;/span&gt; &lt;span class="s"&gt;ssl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;ssl&lt;/span&gt;                    &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;ssl_certificate&lt;/span&gt;        &lt;span class="s"&gt;login.cert&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;ssl_certificate_key&lt;/span&gt;    &lt;span class="s"&gt;login.key&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;加入这几行配置后，重载nginx， nginx上ssl就可以生效了，这时用普通的http访问会无法访问， 必须使用https访问，第一次访问firefox会提示证书不信任。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;接下来是在cas中开启ssl的支持，虽然这一步很简单，但是具体我也不甚了解，因为cas是其他同事负责的， 我只是按照他说的去做，所以我说的文件路径或者文件名和cas的原生项目会有不通。接下来我简单说以下如何配置：&lt;/p&gt;
&lt;p&gt;先找到&lt;code&gt;WEB-INFO/spring-configuration&lt;/code&gt;下的配置文件, &lt;code&gt;ticketGrantingTicketCookieGenerator.xml&lt;/code&gt; 和 &lt;code&gt;warnCookieGenerator.xml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;打开文件 &lt;code&gt;ticketGrantingTicketCookieGenerator.xml&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;beans&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.springframework.org/schema/beans&amp;quot;&lt;/span&gt;
   &lt;span class="na"&gt;xmlns:xsi=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;/span&gt;
   &lt;span class="na"&gt;xmlns:p=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.springframework.org/schema/p&amp;quot;&lt;/span&gt;
   &lt;span class="na"&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;description&amp;gt;&lt;/span&gt;
        Defines the cookie that stores the TicketGrantingTicket.  You most likely should never modify these (especially the &amp;quot;secure&amp;quot; property).
        You can change the name if you want to make it harder for people to guess.
    &lt;span class="nt"&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;bean&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ticketGrantingTicketCookieGenerator&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;org.jasig.cas.web.support.CookieRetrievingCookieGenerator&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;p:cookieSecure=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;false&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;p:cookieMaxAge=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-1&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;p:cookieName=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CASTGC&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;p:cookiePath=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/cas&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/beans&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改&lt;code&gt;p:cookieSecure="false"&lt;/code&gt;的值为&lt;code&gt;true&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;打开&lt;code&gt;warnCookieGenerator.xml&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;beans&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.springframework.org/schema/beans&amp;quot;&lt;/span&gt;
   &lt;span class="na"&gt;xmlns:xsi=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;/span&gt;
   &lt;span class="na"&gt;xmlns:p=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.springframework.org/schema/p&amp;quot;&lt;/span&gt;
   &lt;span class="na"&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;description&amp;gt;&lt;/span&gt;
   This Spring Configuration file describes the cookie used to store the WARN parameter so that a user is warned whenever the CAS service
   is used.  You would modify this if you wanted to change the cookie path or the name.
   &lt;span class="nt"&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;

   &lt;span class="nt"&gt;&amp;lt;bean&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;warnCookieGenerator&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;org.jasig.cas.web.support.CookieRetrievingCookieGenerator&amp;quot;&lt;/span&gt;
      &lt;span class="na"&gt;p:cookieSecure=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;false&amp;quot;&lt;/span&gt;
      &lt;span class="na"&gt;p:cookieMaxAge=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;-1&amp;quot;&lt;/span&gt;
      &lt;span class="na"&gt;p:cookieName=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CASPRIVACY&amp;quot;&lt;/span&gt;
      &lt;span class="na"&gt;p:cookiePath=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/cas&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/beans&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改&lt;code&gt;p:cookieSecure="false"&lt;/code&gt; 的值为&lt;code&gt;true&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;修改这两个之后就可以把cas的包放入tomcat中启动tomcat。&lt;/p&gt;
&lt;p&gt;经过上面两部其实按正常情况下已经可以访问了，但是在登录的时候， 进入cas的登录页面进行登录，登录成功后返回的时候会抛出异常，对于这个异常我不甚理解， 但是我在google上所有得到的结果是这时java的一个bug，不过已经给出了解决方法.&lt;/p&gt;
&lt;p&gt;下载下面的代码： &lt;a href="https://gist.github.com/turbidsoul/5506661"&gt;InstallCert.java&lt;/a&gt;&lt;/p&gt;
&lt;script src="https://gist.github.com/turbidsoul/5506661.js"&gt;&lt;/script&gt;

&lt;p&gt;编译之后使用使用下面命令执行以下：&lt;code&gt;java InstallCert cas.xxxxx.com&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;https://login.xxxx.com 是你配置了ssl的服务的那个域名&lt;/p&gt;
&lt;p&gt;执行完后会在当前目录下生成jssecacerts的文件，把文件copy到&lt;code&gt;jdk1.7.0_10\jre\lib\security&lt;/code&gt;目录下 重新启动服务即可。或者在java的启动参数中加入&lt;code&gt;-Djavax.net.ssl.trustStore=F:/work/Java/jssecacerts&lt;/code&gt;, 重新启动也是可行的，我使用的后面这个方法，前面的那个我没有测试，不过应该不会有问题。&lt;/p&gt;
&lt;p&gt;到这里就算是把ssl配置完成了，其实并没有什么复杂的东西，就是最后java这个问题让我找了很常时间。 最后在java的社区中找到解决办法，可以这个类的源码文件的下载链接还失效了，在google中找了半天才找到个完整的。&lt;/p&gt;</summary><category term="nginx"></category><category term="cas"></category><category term="ssl"></category><category term="java"></category><category term="https"></category></entry></feed>