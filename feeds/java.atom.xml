<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Turbidsoul's 小黑屋</title><link href="http://blog.turbidsoul.me/" rel="alternate"></link><link href="http://blog.turbidsoul.me/feeds/java.atom.xml" rel="self"></link><id>http://blog.turbidsoul.me/</id><updated>2013-06-18T00:00:00+08:00</updated><entry><title>一个css错误引起的maven StackOverflowError</title><link href="http://blog.turbidsoul.me/posts/yi-ge-csscuo-wu-yin-qi-de-maven-stackoverflowerror.html" rel="alternate"></link><updated>2013-06-18T00:00:00+08:00</updated><author><name>Turbidsoul Chan</name></author><id>tag:blog.turbidsoul.me,2013-06-18:posts/yi-ge-csscuo-wu-yin-qi-de-maven-stackoverflowerror.html</id><summary type="html">&lt;p&gt;这个问题是我的一个失误造成的，这是上一片文章的后续，我在使用正则做文本替换的时候没有注意到，这个正则在主干上是正常的，但是在分支上执行的时候使一行css少了一个引号，这个问题在浏览器中是暴露不出来的，之后在maven打包的时候对文件做压缩的时候才会出现，下面我们来看看是什么样的问题。&lt;/p&gt;
&lt;p&gt;我们项目使用的是 &lt;a href="https://github.com/davidB/yuicompressor-maven-plugin" title="yuicompressor-maven-plugin"&gt;yuicompressor-maven-plugin&lt;/a&gt; 做js和css的压缩，在压缩的过程中出现了下面的错误：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;---------------------------------------------------&lt;/span&gt;
&lt;span class="x"&gt;constituent[0]: file:/E:/opensource/apache/maven-2.2.1.RELEASE/lib/aether-api-1.13.1.jar&lt;/span&gt;
&lt;span class="x"&gt;constituent[1]: file:/E:/opensource/apache/maven-2.2.1.RELEASE/lib/aether-connector-wagon-1.13.1.jar&lt;/span&gt;
&lt;span class="x"&gt;constituent[2]: file:/E:/opensource/apache/maven-2.2.1.RELEASE/lib/aether-impl-1.13.1.jar&lt;/span&gt;
&lt;span class="x"&gt;constituent[3]: file:/E:/opensource/apache/maven-2.2.1.RELEASE/lib/aether-spi-1.13.1.jar&lt;/span&gt;
&lt;span class="x"&gt;constituent[4]: file:/E:/opensource/apache/maven-2.2.1.RELEASE/lib/aether-util-1.13.1.jar&lt;/span&gt;
&lt;span class="x"&gt;constituent[5]: file:/E:/opensource/apache/maven-2.2.1.RELEASE/lib/commons-cli-1.2.jar&lt;/span&gt;
&lt;span class="x"&gt;constituent[6]: file:/E:/opensource/apache/maven-2.2.1.RELEASE/lib/maven-aether-provider-3.0.4.jar&lt;/span&gt;
&lt;span class="x"&gt;constituent[7]: file:/E:/opensource/apache/maven-2.2.1.RELEASE/lib/maven-artifact-3.0.4.jar&lt;/span&gt;
&lt;span class="x"&gt;constituent[8]: file:/E:/opensource/apache/maven-2.2.1.RELEASE/lib/maven-compat-3.0.4.jar&lt;/span&gt;
&lt;span class="x"&gt;constituent[9]: file:/E:/opensource/apache/maven-2.2.1.RELEASE/lib/maven-core-3.0.4.jar&lt;/span&gt;
&lt;span class="x"&gt;constituent[10]: file:/E:/opensource/apache/maven-2.2.1.RELEASE/lib/maven-embedder-3.0.4.jar&lt;/span&gt;
&lt;span class="x"&gt;constituent[11]: file:/E:/opensource/apache/maven-2.2.1.RELEASE/lib/maven-model-3.0.4.jar&lt;/span&gt;
&lt;span class="x"&gt;constituent[12]: file:/E:/opensource/apache/maven-2.2.1.RELEASE/lib/maven-model-builder-3.0.4.jar&lt;/span&gt;
&lt;span class="x"&gt;constituent[13]: file:/E:/opensource/apache/maven-2.2.1.RELEASE/lib/maven-plugin-api-3.0.4.jar&lt;/span&gt;
&lt;span class="x"&gt;constituent[14]: file:/E:/opensource/apache/maven-2.2.1.RELEASE/lib/maven-repository-metadata-3.0.4.jar&lt;/span&gt;
&lt;span class="x"&gt;constituent[15]: file:/E:/opensource/apache/maven-2.2.1.RELEASE/lib/maven-settings-3.0.4.jar&lt;/span&gt;
&lt;span class="x"&gt;constituent[16]: file:/E:/opensource/apache/maven-2.2.1.RELEASE/lib/maven-settings-builder-3.0.4.jar&lt;/span&gt;
&lt;span class="x"&gt;constituent[17]: file:/E:/opensource/apache/maven-2.2.1.RELEASE/lib/plexus-cipher-1.7.jar&lt;/span&gt;
&lt;span class="x"&gt;constituent[18]: file:/E:/opensource/apache/maven-2.2.1.RELEASE/lib/plexus-component-annotations-1.5.5.jar&lt;/span&gt;
&lt;span class="x"&gt;constituent[19]: file:/E:/opensource/apache/maven-2.2.1.RELEASE/lib/plexus-interpolation-1.14.jar&lt;/span&gt;
&lt;span class="x"&gt;constituent[20]: file:/E:/opensource/apache/maven-2.2.1.RELEASE/lib/plexus-sec-dispatcher-1.3.jar&lt;/span&gt;
&lt;span class="x"&gt;constituent[21]: file:/E:/opensource/apache/maven-2.2.1.RELEASE/lib/plexus-utils-2.0.6.jar&lt;/span&gt;
&lt;span class="x"&gt;constituent[22]: file:/E:/opensource/apache/maven-2.2.1.RELEASE/lib/sisu-guava-0.9.9.jar&lt;/span&gt;
&lt;span class="x"&gt;constituent[23]: file:/E:/opensource/apache/maven-2.2.1.RELEASE/lib/sisu-guice-3.1.0-no_aop.jar&lt;/span&gt;
&lt;span class="x"&gt;constituent[24]: file:/E:/opensource/apache/maven-2.2.1.RELEASE/lib/sisu-inject-bean-2.3.0.jar&lt;/span&gt;
&lt;span class="x"&gt;constituent[25]: file:/E:/opensource/apache/maven-2.2.1.RELEASE/lib/sisu-inject-plexus-2.3.0.jar&lt;/span&gt;
&lt;span class="x"&gt;constituent[26]: file:/E:/opensource/apache/maven-2.2.1.RELEASE/lib/wagon-file-2.2.jar&lt;/span&gt;
&lt;span class="x"&gt;constituent[27]: file:/E:/opensource/apache/maven-2.2.1.RELEASE/lib/wagon-http-2.2-shaded.jar&lt;/span&gt;
&lt;span class="x"&gt;constituent[28]: file:/E:/opensource/apache/maven-2.2.1.RELEASE/lib/wagon-provider-api-2.2.jar&lt;/span&gt;
&lt;span class="x"&gt;---------------------------------------------------&lt;/span&gt;
&lt;span class="x"&gt;Exception in thread &amp;quot;main&amp;quot; java.lang.StackOverflowError&lt;/span&gt;
&lt;span class="x"&gt;        at java.util.regex.Pattern&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;Loop&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;Pattern.java:&lt;/span&gt;&lt;span class="m"&gt;4683&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;        at java.util.regex.Pattern&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;GroupTail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;Pattern.java:&lt;/span&gt;&lt;span class="m"&gt;4615&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;        at java.util.regex.Pattern&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;BranchConn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;Pattern.java:&lt;/span&gt;&lt;span class="m"&gt;4466&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;        at java.util.regex.Pattern&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;CharProperty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;Pattern.java:&lt;/span&gt;&lt;span class="m"&gt;3694&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;        at java.util.regex.Pattern&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;Branch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;Pattern.java:&lt;/span&gt;&lt;span class="m"&gt;4502&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;        at java.util.regex.Pattern&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;GroupHead&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;Pattern.java:&lt;/span&gt;&lt;span class="m"&gt;4556&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;        at java.util.regex.Pattern&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;Loop&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;Pattern.java:&lt;/span&gt;&lt;span class="m"&gt;4683&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;        at java.util.regex.Pattern&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;GroupTail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;Pattern.java:&lt;/span&gt;&lt;span class="m"&gt;4615&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;google了一下，有过类似的问题，但是并不完全一样，而且我们项目中并没有使用别的一些插件，所以不会是网上说的哪些问题。&lt;/p&gt;
&lt;p&gt;我们项目有主干和一个分支，主干上是没有问题，问题只在分支上出现，当时替换的时候使用的是同一个正则，在主干上既然正常了，分支上应该也不会有问题，所以我觉得正则应该也不会有问题。&lt;/p&gt;
&lt;p&gt;我用sublime的diff插件比对了两个项目的 &lt;em&gt;pom.xml&lt;/em&gt; 也没有差别，本来想用windiff比较两个项目下，style文件的差别，但是放弃了，一是文件还是比较多的，而且两个项目在样式上已经有了一些差别，这样比较很难看出问题所在。&lt;/p&gt;
&lt;p&gt;不过maven为我们提供了调试参数 &lt;strong&gt;-X&lt;/strong&gt; 输入 &lt;code&gt;mvn yuicompressor:compress -X&lt;/code&gt; maven就会打印出调试信息：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;[DEBUG] compress file :F:\work\work1\old_ksdfront\src\main\webapp\resources\style\share\layout.css to F:\work\work1\old_ksdfront\targe
rces\style\share\layout.css
[DEBUG] only compress if input file is younger than existing output file
[DEBUG] use a temporary outputfile (in case in == out)
[DEBUG] start compression
[DEBUG] end compression
[INFO] layout.css (12088b) -&amp;gt; layout.css (10582b)[87%]
###############################################################################
[DEBUG] compress file :F:\work\work1\old_ksdfront\src\main\webapp\resources\style\share\page.css to F:\work\work1\old_ksdfront\target\
es\style\share\page.css
[DEBUG] only compress if input file is younger than existing output file
[DEBUG] use a temporary outputfile (in case in == out)
[DEBUG] start compression
###############################################################################
---------------------------------------------------
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;看我用 &lt;em&gt;#&lt;/em&gt; 框出的几行和＃之上的只讲有什么差别，从&lt;code&gt;[DEBUG] start compression&lt;/code&gt; 之后 就没有了，也就是说在业所page.css文件的时候报错了，这样文件就简单了，我需要检查一下这个page.css文件。&lt;/p&gt;
&lt;p&gt;我在此用diff比较了两个项目下的page.css文件的差别，唯一可能引起错的地方之后一个：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nc"&gt;.new-commentsIco&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;background&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url(/resources/style/images/share/share_c.png&amp;quot;)&lt;/span&gt; &lt;span class="m"&gt;-189px&lt;/span&gt; &lt;span class="m"&gt;-509px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;padding-left&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;url之后的链接少了一个 "&lt;strong&gt;"&lt;/strong&gt;",我加上引号之后在运行插件压缩css文件，这次成功了。看来问题就是出在这里。&lt;/p&gt;
&lt;h4&gt;结论&lt;/h4&gt;
&lt;p&gt;这个问题并不是一定会一定出现，可能需要特性的环境，我并没有做详细的求证，但是我昨晚在家里的时候就准备写这篇文章，但是我发现我用同样的方式是无法重现问题，可能是我家里的只用了一个css文件，而公司的项目css和js文件会比较多的原因造成的，我并不清楚，写这篇文章的目的只是给遇到这类问题的人提醒，凡事要小心，谨慎，细心和耐心，问题本身并不是什么高深问题，但是我却花了一下午的时间，检查了所有可能出问题的地方，刚开始的时候有些浮躁，并没有去注意这些细节上的问题，但是在两三个小时之后才发现这样并不能解决问题，去洗了个脸，清醒一下，回来沉下心仔细的重新整理一下，其实很快就能解决问题。&lt;/p&gt;&lt;script type="text/javascript" src="http://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.1/jquery.min.js"&gt;&lt;/script&gt;
&lt;script type= "text/javascript"&gt;
    if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
        var mathjaxscript = document.createElement('script');
        mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
        mathjaxscript.type = 'text/javascript';
        mathjaxscript.src = 'https:' == document.location.protocol
                ? 'https://c328740.ssl.cf1.rackcdn.com/mathjax/latest/MathJax.js?config=TeX-MML-AM_HTMLorMML-full'
                : 'http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_HTMLorMML-full';
        mathjaxscript[(window.opera ? "innerHTML" : "text")] =
            "MathJax.Hub.Config({" +
            "    asciimath2jax: {" +
            "      delimiters: [['$','$'], ['`','`']]"+
            "    }"+
            "}); ";
        (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
    }
&lt;/script&gt;
</summary><category term="java"></category><category term="maven"></category><category term="css"></category></entry><entry><title>JDK8新特性 Calendar.Builder</title><link href="http://blog.turbidsoul.me/posts/jdk8xin-te-xing-calendarbuilder.html" rel="alternate"></link><updated>2013-05-29T00:00:00+08:00</updated><author><name>Turbidsoul Chan</name></author><id>tag:blog.turbidsoul.me,2013-05-29:posts/jdk8xin-te-xing-calendarbuilder.html</id><summary type="html">&lt;p&gt;5月23号，Oracle 发布了 jdk8 &lt;strong&gt;M7&lt;/strong&gt; 版，这是一个&lt;a href="http://openjdk.java.net/projects/jdk8/milestones#Feature_Complete"&gt;Feature Complete&lt;/a&gt;，就是说它已经把所有特性和功能都加入。在翻看 &lt;strong&gt;M7&lt;/strong&gt; 的文档时发现了 &lt;a href="http://download.java.net/jdk8/docs/api/java/util/Locale.Builder.html" title="Locale.Builder"&gt;&lt;em&gt;Locale.Builder&lt;/em&gt;&lt;/a&gt; ，在jdk7的时候加入过一个类似的：&lt;a href="http://download.java.net/jdk8/docs/api/java/util/Locale.Builder.html" title="Locale.Builder"&gt;&lt;em&gt;Locale.Builder&lt;/em&gt;&lt;/a&gt;, 下面我们来看看 &lt;a href="http://download.java.net/jdk8/docs/api/java/util/Calendar.Builder.html" title="Calendar.Builder"&gt;&lt;em&gt;Calendar.Builder&lt;/em&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;h4&gt;允许单语句设置&lt;/h4&gt;
&lt;p&gt;允许使用 &lt;a href="http://download.java.net/jdk8/docs/api/java/util/Calendar.Builder.html#set(int,%20int)" title="set(int, int)"&gt;&lt;code&gt;set(int, int)&lt;/code&gt;&lt;/a&gt; 方法，为指定的Field设置值，如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.Calendar&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.text.SimpleDateFormat&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;static&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Calendar&lt;/span&gt;&lt;span class="o"&gt;.*;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;testSingleStatement&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Calendar&lt;/span&gt; &lt;span class="n"&gt;cal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Calendar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Builder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;set&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;YEAR&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2013&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;set&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MONTH&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MAY&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;set&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DATE&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;set&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HOUR&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;set&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MINUTE&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;46&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;set&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SECOND&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stringifyCalendar&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cal&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;stringifyCalendar&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Calendar&lt;/span&gt; &lt;span class="n"&gt;cal&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;SimpleDateFormat&lt;/span&gt; &lt;span class="n"&gt;sdf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SimpleDateFormat&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;yyyy-MM-dd HH:mm:ss&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sdf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getTime&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;允许设置Date和Time&lt;/h4&gt;
&lt;p&gt;除了&lt;a href="http://download.java.net/jdk8/docs/api/java/util/Calendar.Builder.html#set(int,%20int)" title="set(int, int)"&gt;&lt;code&gt;set(int, int)&lt;/code&gt;&lt;/a&gt; 这样的方法外，还有还有一些更多参数的方法如：&lt;a href="http://download.java.net/jdk8/docs/api/java/util/Calendar.Builder.html#setDate(int,%20int,%20int)" title="setDate(int, int, int)"&gt;&lt;code&gt;setDate(int, int, int)&lt;/code&gt;&lt;/a&gt;，&lt;a href="http://download.java.net/jdk8/docs/api/java/util/Calendar.Builder.html#setTimeOfDay(int,%20int,%20int)" title="setTimeOfDay(int, int, int)"&gt;&lt;code&gt;setTimeOfDay(int, int, int)&lt;/code&gt;&lt;/a&gt; 下面我们来看一个例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testSingleStatements2&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Calendar&lt;/span&gt; &lt;span class="n"&gt;cal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Calendar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Builder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setDate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2013&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MAY&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setTimeOfDay&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stringifyCalendar&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cal&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;允许通过Calendar Field设置值&lt;/h4&gt;
&lt;p&gt;除了上面的两种方法外还可以使用&lt;a href="http://download.java.net/jdk8/docs/api/java/util/Calendar.Builder.html#setFields(int...)" title="setFields(int...)"&gt;&lt;code&gt;setFields(int...)&lt;/code&gt;&lt;/a&gt;, 如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testSingleStatements3&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Calendar&lt;/span&gt; &lt;span class="n"&gt;cal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Calendar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Builder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setFields&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;YEAR&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2013&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MONTH&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MAY&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DATE&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HOUR&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MINUTE&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SECOND&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stringifyCalendar&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cal&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;通过Calendar.Builder 转换 Instant 到 Calendar&lt;/h4&gt;
&lt;p&gt;&lt;a href="file:///F:/work/Java/doc/docs/api/index.html" title="Instant"&gt;Instant&lt;/a&gt; 也是jdk8的新特性，它是&lt;a href="http://download.java.net/jdk8/docs/api/java/time/package-summary.html" title="java.time.*"&gt;java.time.*&lt;/a&gt; 下的类，有兴趣的可以区查看一下官方文档，我会在过段时间，研究了之后在发一篇这个包的介绍文章，下面看一下之后的代码:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;testSingleStatements4&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Calendar&lt;/span&gt; &lt;span class="n"&gt;cal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Calendar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Builder&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setInstant&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Instant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;now&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;toEpochMilli&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stringifyCalendar&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cal&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;结论&lt;/h4&gt;
&lt;p&gt;对于java的日期时间API一直都是被人吐槽的对象，虽然&lt;code&gt;Calendar.Builder&lt;/code&gt;对写大量关于日期时间相关代码的压力还是有所减少，但是还是觉得不甚如人意，我还是很希望Java对日期时间API的调整更加方便使用，因为每次使用现有的API都忍不住像吐槽一下。&lt;/p&gt;</summary><category term="java"></category><category term="jdk8"></category></entry><entry><title>OpenSSL和Java AES算法的的问题</title><link href="http://blog.turbidsoul.me/posts/opensslhe-java-aessuan-fa-de-de-wen-ti.html" rel="alternate"></link><updated>2013-03-13T00:00:00+08:00</updated><author><name>Turbidsoul Chan</name></author><id>tag:blog.turbidsoul.me,2013-03-13:posts/opensslhe-java-aessuan-fa-de-de-wen-ti.html</id><summary type="html">&lt;p&gt;开篇第一句话我想说， &lt;strong&gt;OpenSSL不支持与Java的对接&lt;/strong&gt; ，这是多么蛋疼的一句话，不过确实是这样，原因是在c中的填充方式和Java中的填充方式不一样，Java不支持c中的/0的填充方式。&lt;/p&gt;
&lt;p&gt;具体信息请查看：&lt;a href="http://blog.csdn.net/rocketball/article/details/6575677"&gt;OpenSSL和JAVA AES算法的问题总结&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;至于我为什么会写这篇文章呢，是我们的项目中有部分在网络传输的内容需要加密，所以就选用了AES的，服务端使用的是&lt;a href="http://openresty.org/"&gt;openresty&lt;/a&gt; 这是淘宝的一个大牛写的，他里面集成了LuaJit， 加密的部分使用的是resty.aes，而resty使用的是OpenSSL的C代码实现的加密解密。为了和OpenSSL实现对接，我就蛋疼的去简单的链接了下OpenSSL，在上面的文章中才指导OpenSSL并不支持Java，查了无数人的文章，很多人都对这个问题很苦恼，最后在 stackoverflow 里找到了一个大牛给出了一个解码的实现 &lt;a href="http://stackoverflow.com/questions/11783062/how-to-decrypt-an-encrypted-file-in-java-with-openssl-with-aes"&gt;stackoverflow &lt;/a&gt;我根据这位大牛的代码简单的修改了一下，就做成了我需要的代码：&lt;/p&gt;
&lt;script src="https://gist.github.com/turbidsoul/5227012.js"&gt;&lt;/script&gt;

&lt;p&gt;最后我想吐槽一下lua5.1居然不支持位运算，要5.2才支持，好吧，openresty集成的就是5.1所以我在实现lua的16位编码解码果然蛋疼了一下。&lt;/p&gt;</summary><category term="openssl"></category><category term="java"></category><category term="aes"></category><category term="arithmetic"></category></entry><entry><title>FTP的PORT模式，PASV模式， FXP协议和在java中使用时的一些问题</title><link href="http://blog.turbidsoul.me/posts/ftpde-portmo-shi-pasvmo-shi-fxpxie-yi-he-zai-javazhong-shi-yong-shi-de-yi-xie-wen-ti.html" rel="alternate"></link><updated>2012-12-29T00:00:00+08:00</updated><author><name>Turbidsoul Chan</name></author><id>tag:blog.turbidsoul.me,2012-12-29:posts/ftpde-portmo-shi-pasvmo-shi-fxpxie-yi-he-zai-javazhong-shi-yong-shi-de-yi-xie-wen-ti.html</id><summary type="html">&lt;p&gt;这是最近一礼拜遇到的一个很头疼的问题，由于我们的系统需要需要用到ftp的fxp进行两个ftp服务器之间进行数据传输。 但是就是在这上出现了让我很郁闷的问题，连着几天，一个坑接一个坑，连续解决了5，6个问题，到今天下午才算是把所有问题解决。&lt;/p&gt;
&lt;p&gt;在讲述我遇到的问题之前我们先了解下几个概念：&lt;/p&gt;
&lt;p&gt;首先是PORT模式和PASV模式，也就是FTP的主动模式和被动模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;主动模式的FTP连接建立要遵循以下步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端打开一个随机的端口（端口号大于1024，在这里，我们称它为x），同时一个FTP进程连接至服务器的21号命令端口。此时，源端口为随机端口x，在客户端，远程端口为21，在服务器。&lt;/li&gt;
&lt;li&gt;客户端开始监听端口（x+1），同时向服务器发送一个端口命令（通过服务器的21号命令端口），此命令告诉服务器客户端正在监听的端口号并且已准备好从此端口接收数据。这个端口就是我们所知的数据端口。&lt;/li&gt;
&lt;li&gt;服务器打开20号源端口并且建立和客户端数据端口的连接。此时，源端口为20，远程数据端口为（x+1）。&lt;/li&gt;
&lt;li&gt;客户端通过本地的数据端口建立一个和服务器20号端口的连接，然后向服务器发送一个应答，告诉服务器它已经建立好了一个连接。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;被动模式FTP: 为了解决服务器发起到客户的连接的问题，人们开发了一种不同的FTP连接方式。这就是所谓的被动方式，或者叫做PASV，当客户端通知服务器它处于被动模式时才启用。 在被动方式FTP中，命令连接和数据连接都由客户端发起，这样就可以解决从服务器到客户端的数据端口的入方向连接被防火墙过滤掉的问题。 当开启一个 FTP连接时，客户端打开两个任意的非特权本地端口（N &amp;gt; 1024和N+1）。第一个端口连接服务器的21端口，但与主动方式的FTP不同，客户端不会提交PORT命令并允许服务器来回连它的数据端口，而是提交 PASV命令。这样做的结果是服务器会开启一个任意的非特权端口（P &amp;gt; 1024），并发送PORT P命令给客户端。然后客户端发起从本地端口N+1到服务器的端口P的连接用来传送数据。 对于服务器端的防火墙来说，必须允许下面的通讯才能支持被动方式的FTP：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从任何大于1024的端口到服务器的21端口 （客户端的初始化连接）&lt;/li&gt;
&lt;li&gt;服务器的21端口到任何大于1024的端口 （服务器响应到客户端的控制端口的连接）&lt;/li&gt;
&lt;li&gt;从任何大于1024端口到服务器的大于1024端口 （客户端初始化数据连接到服务器指定的任意端口）&lt;/li&gt;
&lt;li&gt;服务器的大于1024端口到远程的大于1024的端口（服务器发送ACK响应和数据到客户端的数据端口）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;以上这些都是我从百度百科扒出来的，也只是给各位简单的了解先FTP和我这几天遇到的问题的技术背景&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们的系统环境是这样的，数据是从A服务器(系统是window server 2003，ftp服务器serv-u，使用的默认模式配置，应该是被动模式，但是貌似是主被动都支持) 先通过FXP传送到B服务器(中转服务器，是linux，ftp服务器是vsftpd，被动模式，不能主被动同时开启，会出现5XX错误)，然后在使用fxp分别传送到c1,c2服务器(windows server 2003, ftp服务器是serv-u，同样是使用的默认配置模式)，&lt;/p&gt;
&lt;p&gt;我们在项目中使用的是Apache的net包的ftp功能进行FTP操作,下面是我们使用FXP功能的代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;FTPClient&lt;/span&gt; &lt;span class="n"&gt;srcServer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ftpLog&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;FTPClient&lt;/span&gt; &lt;span class="n"&gt;targetServer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ftpLog&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Let&amp;#39;s just assume success for now.&lt;/span&gt;
&lt;span class="n"&gt;srcServer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;enterRemotePassiveMode&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;targetServer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;enterRemoteActiveMode&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;InetAddress&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getByName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;srcServer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getPassiveHost&lt;/span&gt;&lt;span class="o"&gt;()),&lt;/span&gt; &lt;span class="n"&gt;srcServer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getPassivePort&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;

&lt;span class="c1"&gt;// Although you would think the store command should be sent to&lt;/span&gt;
&lt;span class="c1"&gt;// server2&lt;/span&gt;
&lt;span class="c1"&gt;// first, in reality, ftp servers like wu-ftpd start accepting data&lt;/span&gt;
&lt;span class="c1"&gt;// connections right after entering passive mode. Additionally, they&lt;/span&gt;
&lt;span class="c1"&gt;// don&amp;#39;t even send the positive preliminary reply until after the&lt;/span&gt;
&lt;span class="c1"&gt;// transfer is completed (in the case of passive mode transfers).&lt;/span&gt;
&lt;span class="c1"&gt;// Therefore, calling store first would hang waiting for a&lt;/span&gt;
&lt;span class="c1"&gt;// preliminary&lt;/span&gt;
&lt;span class="c1"&gt;// reply.&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;targetServer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;remoteStoreUnique&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;encodepath&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getPath&lt;/span&gt;&lt;span class="o"&gt;()))&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;srcServer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;remoteRetrieve&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getPath&lt;/span&gt;&lt;span class="o"&gt;()))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// if(ftp1.remoteRetrieve(file1) &amp;amp;&amp;amp; ftp2.remoteStore(file2)) {&lt;/span&gt;
    &lt;span class="c1"&gt;// We have to fetch the positive completion reply.&lt;/span&gt;
    &lt;span class="n"&gt;srcServer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;completePendingCommand&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;targetServer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;completePendingCommand&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这段代码是我们头从apache网站中扒下来，稍作改动，目的就是为了从src服务器向target服务器发送一个文件，文件在10G左右。 代码很简单创建两个FTP连接，分别连接源服务器和目标服务器，告诉源服务器使用被动模式，并告诉目标服务器使用主动模式，并告诉目标服务器源服务器的ip和端口。 最后面的几句就简单的，if判断条件里&amp;amp;&amp;amp;的左边的语句targetServer.remoteStoreUnique(encodepath(target.getPath()))的意思是，目标服务器接收数据， &amp;amp;&amp;amp;右边srcServer.remoteRetrieve(source.getPath())是告诉源服务器发送数据，这样两个服务器就会进行数据传输，直到传输完成，如果这两个服务器不支持FXP， 那么if语句里面的两句话就会返回false。&lt;/p&gt;
&lt;p&gt;从Apache的代码中不难看出，进行FXP需要两个FTP服务器一个是被动模式一个是主动模式，将被动模式的服务器的地址和端口告诉主动模式的服务器，有主动模式服务器连接被动模式服务器进行数据传输。 这里不一定是要源服务器是主动模式，目标服务器是主动模式，反过来也是完全可以的，我们这里之前的代码是目标服务器是被动模式，源服务器是主动模式，但是由于系统架构的变化所以这里的代码也有了变化。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;里需要注意的是&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;srcServer.enterRemotePassiveMode();&lt;/code&gt;这句话需要在前面，&lt;code&gt;targetServer.enterRemoteActiveMode(InetAddress.getByName(srcServer.getPassiveHost()), srcServer.getPassivePort());&lt;/code&gt;一定要在后面, 因为主动模式的服务器需要被动模式的服务器的地址和端口。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;targetServer.remoteStoreUnique(encodepath(target.getPath())) &amp;amp;&amp;amp; srcServer.remoteRetrieve(source.getPath())&lt;/code&gt;这两句也是有顺序的， 最开始的时候srcServer.&lt;code&gt;remoteRetrieve(source.getPath())&lt;/code&gt;在&lt;code&gt;targetServer.remoteStoreUnique(encodepath(target.getPath()))&lt;/code&gt;之前，在两个都是serv-u的情况下是没有问题的， 但是后面我们的源ftp服务器换成了vsftpd这样就不可以，在内网中进行测试呃时候，只有20字节的速度，而在公网中这两个就干脆连不上，但是改成现在的样子速度就能跑满。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们在调试中还发现，vsftpd是不能同时启动两种模式的，不然在执行命令的时候会返回一个5XX的错误，只能启动主动或者被动模式，网上的一些文章发的配置信息很多都是主被动同时启动的，我认为这是错的，但是我有一点很疑惑我们的serv-u使用的是默认配置， 这种的配置貌似既是主动也是被动，有点不理解，也就是说客户端连接的时候需要什么模式就会切换到什么模式。&lt;/p&gt;
&lt;p&gt;还想提醒一下不论什么程序，只要是在程序中使用FTP操作的，需要注意FTP是否支持一些命令，比方说vsftpd就不支持mlst这个命令，还有serv-u默认配置下，是不能使用list命令的，会返回425错误，但是serv-u支持mlst命令，等等各种问题。 下午在闲下来的时候在和同事讨论这个问题的时候，得到结论是：FTP的协议规范可能太简单，很多服务器的开发者，对协议支持的都不太一样，虽然大部分功能是一样的，但是在一些细节上有很大的差别，这些差别和可能就是我们需要进行攻关的地方。 当然我们也在这里拌了好几天，一个问题一个问题的解决，虽然耽误了很多时间但是收获也很多。&lt;/p&gt;</summary><category term="ftp"></category><category term="port"></category><category term="pasv"></category><category term="fxp"></category><category term="java"></category></entry><entry><title>JRebel小记</title><link href="http://blog.turbidsoul.me/posts/jrebelxiao-ji.html" rel="alternate"></link><updated>2012-12-15T00:00:00+08:00</updated><author><name>Turbidsoul Chan</name></author><id>tag:blog.turbidsoul.me,2012-12-15:posts/jrebelxiao-ji.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;首先我先承认我标题党了，其实完全算不上简述，只是我这两天使用JRebel的一点心得吧。 当然我用的是盗版啦，谁让我有一个高富帅的心却是一个吊丝的命呢。 至于如何破解什么的请自己到网上搜索。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;进入正题，我使用的是 eclipse 4.2+RunJettyRun(jetty当然是8喽)+JRebel5.1 ，不过我用的破解的JRebel是5.0的， 直接覆盖，完全没问题。&lt;/p&gt;
&lt;p&gt;首先说一下如何在通过RunJettyRun使用JRebel,其实很简单，只需要在启动的配置的 Arguments &amp;gt; VM Arguments 中加入 “${jrebel_args}”就可以了， 这样在启动的时候就能看到JRebel启动：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[2012-12-15 22:32:17]&lt;/span&gt;
&lt;span class="err"&gt;[2012-12-15&lt;/span&gt; &lt;span class="err"&gt;22:32:17]&lt;/span&gt; &lt;span class="c1"&gt;#############################################################&lt;/span&gt;
&lt;span class="k"&gt;[2012-12-15 22:32:17]&lt;/span&gt;
&lt;span class="err"&gt;[2012-12-15&lt;/span&gt; &lt;span class="err"&gt;22:32:17]&lt;/span&gt;  &lt;span class="err"&gt;JRebel&lt;/span&gt; &lt;span class="err"&gt;5.0.0&lt;/span&gt; &lt;span class="err"&gt;(201206080930)&lt;/span&gt;
&lt;span class="err"&gt;[2012-12-15&lt;/span&gt; &lt;span class="err"&gt;22:32:17]&lt;/span&gt;  &lt;span class="err"&gt;(c)&lt;/span&gt; &lt;span class="err"&gt;Copyright&lt;/span&gt; &lt;span class="err"&gt;ZeroTurnaround&lt;/span&gt; &lt;span class="err"&gt;OU,&lt;/span&gt; &lt;span class="err"&gt;Estonia,&lt;/span&gt; &lt;span class="err"&gt;Tartu.&lt;/span&gt;
&lt;span class="k"&gt;[2012-12-15 22:32:17]&lt;/span&gt;
&lt;span class="err"&gt;[2012-12-15&lt;/span&gt; &lt;span class="err"&gt;22:32:17]&lt;/span&gt;  &lt;span class="err"&gt;Over&lt;/span&gt; &lt;span class="err"&gt;the&lt;/span&gt; &lt;span class="err"&gt;last&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt; &lt;span class="err"&gt;days&lt;/span&gt; &lt;span class="err"&gt;JRebel&lt;/span&gt; &lt;span class="err"&gt;prevented&lt;/span&gt;
&lt;span class="err"&gt;[2012-12-15&lt;/span&gt; &lt;span class="err"&gt;22:32:17]&lt;/span&gt;  &lt;span class="err"&gt;at&lt;/span&gt; &lt;span class="err"&gt;least&lt;/span&gt; &lt;span class="err"&gt;2&lt;/span&gt; &lt;span class="err"&gt;redeploys/restarts&lt;/span&gt; &lt;span class="err"&gt;saving&lt;/span&gt; &lt;span class="err"&gt;you&lt;/span&gt; &lt;span class="err"&gt;about&lt;/span&gt; &lt;span class="err"&gt;0.1&lt;/span&gt; &lt;span class="err"&gt;hours.&lt;/span&gt;
&lt;span class="k"&gt;[2012-12-15 22:32:17]&lt;/span&gt;
&lt;span class="err"&gt;[2012-12-15&lt;/span&gt; &lt;span class="err"&gt;22:32:17]&lt;/span&gt;  &lt;span class="err"&gt;This&lt;/span&gt; &lt;span class="err"&gt;product&lt;/span&gt; &lt;span class="err"&gt;is&lt;/span&gt; &lt;span class="err"&gt;licensed&lt;/span&gt; &lt;span class="err"&gt;to&lt;/span&gt; &lt;span class="err"&gt;Unlimited&lt;/span&gt;
&lt;span class="err"&gt;[2012-12-15&lt;/span&gt; &lt;span class="err"&gt;22:32:17]&lt;/span&gt;  &lt;span class="err"&gt;For&lt;/span&gt; &lt;span class="err"&gt;FUN!&lt;/span&gt; &lt;span class="err"&gt;Unlimited!&lt;/span&gt; &lt;span class="err"&gt;Enjoy!&lt;/span&gt;
&lt;span class="k"&gt;[2012-12-15 22:32:17]&lt;/span&gt;
&lt;span class="err"&gt;[2012-12-15&lt;/span&gt; &lt;span class="err"&gt;22:32:17]&lt;/span&gt;  &lt;span class="err"&gt;The&lt;/span&gt; &lt;span class="err"&gt;following&lt;/span&gt; &lt;span class="err"&gt;plugins&lt;/span&gt; &lt;span class="err"&gt;are&lt;/span&gt; &lt;span class="err"&gt;disabled&lt;/span&gt; &lt;span class="err"&gt;at&lt;/span&gt; &lt;span class="err"&gt;the&lt;/span&gt; &lt;span class="err"&gt;moment:&lt;/span&gt;
&lt;span class="na"&gt;[2012-12-15 22:32:17]  * Apache MyFaces plugin (set -Drebel.myfaces_plugin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;true to enable)&lt;/span&gt;
&lt;span class="na"&gt;[2012-12-15 22:32:17]  * Click plugin (set -Drebel.click_plugin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;true to enable)&lt;/span&gt;
&lt;span class="na"&gt;[2012-12-15 22:32:17]  * JRuby Plugin (set -Drebel.jruby_plugin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;true to enable)&lt;/span&gt;
&lt;span class="na"&gt;[2012-12-15 22:32:17]  * Jersey plugin (set -Drebel.jersey_plugin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;true to enable)&lt;/span&gt;
&lt;span class="na"&gt;[2012-12-15 22:32:17]  * Oracle ADF Core plugin (set -Drebel.adf_core_plugin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;true to enable)&lt;/span&gt;
&lt;span class="na"&gt;[2012-12-15 22:32:17]  * Oracle ADF Faces plugin (set -Drebel.adf_faces_plugin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;true to enable)&lt;/span&gt;
&lt;span class="na"&gt;[2012-12-15 22:32:17]  * Seam-Wicket plugin (set -Drebel.seam_wicket_plugin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;true to enable)&lt;/span&gt;
&lt;span class="na"&gt;[2012-12-15 22:32:17]  * WebObjects plugin (set -Drebel.webobjects_plugin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;true to enable)&lt;/span&gt;
&lt;span class="k"&gt;[2012-12-15 22:32:17]&lt;/span&gt;
&lt;span class="err"&gt;[2012-12-15&lt;/span&gt; &lt;span class="err"&gt;22:32:17]&lt;/span&gt; &lt;span class="c1"&gt;#############################################################&lt;/span&gt;
&lt;span class="k"&gt;[2012-12-15 22:32:17]&lt;/span&gt;
&lt;span class="k"&gt;[2012-12-15 22:32:17]&lt;/span&gt;
&lt;span class="err"&gt;[2012-12-15&lt;/span&gt; &lt;span class="err"&gt;22:32:17]&lt;/span&gt; &lt;span class="err"&gt;JRebel:&lt;/span&gt; &lt;span class="err"&gt;A&lt;/span&gt; &lt;span class="err"&gt;newer&lt;/span&gt; &lt;span class="err"&gt;version&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;5.1.1&amp;#39;&lt;/span&gt; &lt;span class="err"&gt;is&lt;/span&gt; &lt;span class="err"&gt;available&lt;/span&gt; &lt;span class="err"&gt;for&lt;/span&gt; &lt;span class="err"&gt;download&lt;/span&gt;
&lt;span class="err"&gt;[2012-12-15&lt;/span&gt; &lt;span class="err"&gt;22:32:17]&lt;/span&gt; &lt;span class="err"&gt;JRebel:&lt;/span&gt; &lt;span class="err"&gt;from&lt;/span&gt; &lt;span class="err"&gt;http://www.zeroturnaround.com/jrebel/upgrade/&lt;/span&gt;
&lt;span class="k"&gt;[2012-12-15 22:32:17]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;当看到上面的信息就说明JRebel已经启动成功了，也就是说现在JRebel已经生效了。&lt;/p&gt;
&lt;p&gt;这样你可以去修改一下代码，当然你不会立即看到效果，因为JRebel是延迟加载的，也就是说当你运行到需要加载这个类的时候才会加载， 也就是在控制台上能看到下面的输出：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;[2012-12-15 22:37:43] JRebel: Reloading class &amp;#39;cn.is.servlet.TestServlet&amp;#39;.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;有了这句输出表示所修改的代码已经生效，当然如果修改的类里引用了很多其他的类的实例，在重新加载这个类的时候就会把这些类也加载一次， 如果这次操作还包含其他的一些操作，例如登录的权限验证，而修改的代码引用了和权限有关的类，比方说用户（User）， 那么JRebel也会把和User有关的类加载，加载的顺序和操作的顺序是一样的。&lt;/p&gt;
&lt;p&gt;如果在项目中使用的Spring或者Hibernate，可能还可以看到Spring或者Hibernate实体的加载日志，因为Spring和Hibernate的plugin默认是打开的。 在最上面发的日志中，能看到那些日志没有打开，但是看不到那些日志已经打开了，如果在要关闭Spring和Hibernate需要在VM Arguments中才入两个参数， -Drebel.spring_plugin=false, -Drebel.hiberate_plugin=false 加入这两个参数之后，就会在启动的未开启Plugin中看到。&lt;/p&gt;
&lt;p&gt;对于这类的热加载插件，还有另外一个就是DCEVM，个人觉得也不错，可惜已经两年没有更新了，只支持jdk1.6和jdk1.7-ea-b139之前的版，对于最新的完全无法使用。&lt;/p&gt;
&lt;p&gt;DCEVM和JRebel的区别在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DCEVM是JVM的插件，修改了jvm.dll，从虚拟机入手，效率上来说我觉得比JRebel好快， 但是缺点是如果加载的类有通过Spring注入的实例，很可能会变成null，因为类被重新实例话，但是不是通过Spring实例的， 所以没有为里面引用的其他类进行实例。这个问题并不是一定的，但是我曾经出现过这个问题，而且还不只一次，但是我没有细究， 可以肯定的是对于静态变量等是没有办法重新加载的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;而JRebel是从ClassLoader入手的，JRebel在加载的时候会加载这类引用到的所有实例，这样就不会出现DCEVM中出现的问题， 而JRebel也有自己的问题，在某些时候修改的代码次数过多虎抛出一个异常，但是这个异常貌似并没有影响到不能运行，需要重新启动的情况， 也可能是我的类结构比较简单，所以没有影响，因为在网上搜到的别人的文章中有提到过这个异常，但是也没有说会有什么影响。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总的来说JRebel比DCEVM功能更全面，也强大，毕竟是商业软件，且价格不菲，如果环境允许的情况下还是花点钱买个正版的， 毕竟使用盗版也不是什么好事情，而且使用正版也是对软件作者的支持&lt;/p&gt;</summary><category term="java"></category><category term="jrebel"></category></entry><entry><title>Spring配置文件加载的疑问和annotation加载的问题</title><link href="http://blog.turbidsoul.me/posts/springpei-zhi-wen-jian-jia-zai-de-yi-wen-he-annotationjia-zai-de-wen-ti.html" rel="alternate"></link><updated>2012-02-24T00:00:00+08:00</updated><author><name>Turbidsoul Chan</name></author><id>tag:blog.turbidsoul.me,2012-02-24:posts/springpei-zhi-wen-jian-jia-zai-de-yi-wen-he-annotationjia-zai-de-wen-ti.html</id><summary type="html">&lt;p&gt;前几天在做一个异步的模块，简单点说就是上传文件后，后台异步解析，前台定时请求解析的日志，并显示，算是一个实时的给用户看到解析的情况和日志，很简单的一个工作，但是我却遇到了一个让我郁闷了2天的问题。&lt;/p&gt;
&lt;p&gt;问题的起因是在我做完所有工作后发现异步没有执行，也就是说文件的解析方法是同步运行的，也就是说先解析文件，解析完毕后在返回页面，页面才能请求到解析的日志，但是这会已经解析完了文件，没有达打到之前的需求。&lt;/p&gt;
&lt;p&gt;这 里先简单的说下Spring异步的用法，Spring异步的用法很简单，在需要异步的方法加上annotation  &lt;code&gt;@Async&lt;/code&gt; 声明自方法是异步调用的，同时还要在方法所在类上加上annotation &lt;code&gt;@Service&lt;/code&gt;或&lt;code&gt;@Component&lt;/code&gt; 在Spring在加载的时候可以扫描到这个类，然后需要在配置文件中加入&lt;code&gt;&amp;lt;task:annotation-driven /&amp;gt;&lt;/code&gt;，这样就可以在Spring启动的时候，将异步处理器加入全局中，并在调用到有@Async的时候，异步调用。&lt;/p&gt;
&lt;p&gt;上面简单说了下如何配置Spring异步，现在我说下我的问题，问题很简单就是配置类Spring 异步，并且确定配置正确，但是异步配置没有起效！问什么呢？我百思不得其解，没有办法，那就debug跟踪Spring的源代码。&lt;/p&gt;
&lt;p&gt;在 debug的了几次之后，见到那的了解了Spring配置文件加载的方式，很简单，先加载&lt;code&gt;application-context.xml&lt;/code&gt;文件，然后根据 文件在去扫描class的注解，比方说在Spring 3.0中加入的&lt;code&gt;@Autowired&lt;/code&gt; 当Spring扫描到了这个注解，就会在全局的注解处理器（我是这么理解的，其实就是以*AnnotationBeanPostProcessor结尾的 类），而异步的处理是在声明了&lt;code&gt;&amp;lt;task:annotation-driven /&amp;gt;&lt;/code&gt;就会把&lt;code&gt;AsyncAnnotationBeanPostProcessor&lt;/code&gt;加入到全局的注解处理器中，当遇到了声明了@Async的时候，这个 处理器就会生效，并且进行异步的调用。（我这里说的很简单，其实Spring这里不是这么简单，我是跟了2，30次之后才看明白的，如果有兴趣可以自己跟 踪一下。）&lt;/p&gt;
&lt;p&gt;我在跟中的过程中发现&lt;code&gt;&amp;lt;task:annotation-driven /&amp;gt;&lt;/code&gt;生效了，并且把&lt;code&gt;AsyncAnnotationBeanPostProcessor&lt;/code&gt;加入了全局处理器中，但是在调用的时候却没有这个处理器，我 很疑惑。我检查了一边配置文件，并且看了下web.xml文件，发现我们的web.xml配置是这样的:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;&amp;lt;!-- The definition of the Root Spring Container shared by all Servlets and Filters --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;context-param&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;param-name&amp;gt;&lt;/span&gt;contextConfigLocation&lt;span class="nt"&gt;&amp;lt;/param-name&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;param-value&amp;gt;&lt;/span&gt;
                /WEB-INF/spring/root-context.xml
                /WEB-INF/spring/application-context.xml
                /WEB-INF/spring/application-context-shiro.xml
            &lt;span class="c"&gt;&amp;lt;!--&lt;/span&gt;
&lt;span class="c"&gt;            /WEB-INF/spring/application-content-schedule.xml --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/param-value&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/context-param&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;listener&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;listener-class&amp;gt;&lt;/span&gt;org.springframework.web.context.ContextLoaderListener&lt;span class="nt"&gt;&amp;lt;/listener-class&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/listener&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- Processes application requests --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;servlet&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;servlet-name&amp;gt;&lt;/span&gt;appServlet&lt;span class="nt"&gt;&amp;lt;/servlet-name&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;servlet-class&amp;gt;&lt;/span&gt;org.springframework.web.servlet.DispatcherServlet&lt;span class="nt"&gt;&amp;lt;/servlet-class&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;init-param&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;param-name&amp;gt;&lt;/span&gt;contextConfigLocation&lt;span class="nt"&gt;&amp;lt;/param-name&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;param-value&amp;gt;&lt;/span&gt;
                /WEB-INF/spring/appServlet/servlet-context.xml
            &lt;span class="nt"&gt;&amp;lt;/param-value&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/init-param&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;load-on-startup&amp;gt;&lt;/span&gt;1&lt;span class="nt"&gt;&amp;lt;/load-on-startup&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/servlet&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从上面的配置文件可以看出，我们配了两个Spring ，一个是用ContextLoaderListener加载，另一个是靠DispatcherServlet加载，但是在上面的注释用说明了，这两个是可 以互相共享的，也就是说两个是可以互相引用的，事实确实是这样，但是为什么我没法异步呢？&lt;/p&gt;
&lt;p&gt;待着这个疑惑我做了一个试验，写了一个测试用例，在测试用例中是这样的:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SpringAsyncTest&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;AbstractApplicationContext&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ClassPathXmlApplicationContext&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;root-context.xml&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="nd"&gt;@Test&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;asyncTest&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;IImportMng&lt;/span&gt; &lt;span class="n"&gt;mng&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IImportMng&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getBean&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;importMng&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mng&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;testAsync&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;innate&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;SpringAsyncTest.asyncTest() - 测试结束&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stop&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;()))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;SpringAsyncTest.asyncTest() - &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;mng&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getLogAndClear&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;innate&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从上面可以清除看到，我是直接在家的root-context.xml，在root中import了application- context.xml，异步的的配置就在application-context.xml运行之后发现，没有问题，异步执行完全正确，这个测试用例也验 证了我的一个想法，两个Spring Context是可以互相共享，但是确实相对独立的，为了进一步验证我的想法，我在action中，写了一个测试例子，没有用@Autowired注入进 来的，而是使用了WebApplicationContext， 即:&lt;code&gt;WebApplicationContextUtils.getWebApplicationContext(request.getSession().getServletContext());&lt;/code&gt;， 用它得到Spring Context，然后直接异步方法，保存，运行，结果正确！这样就完全确认了我的想法是正确的，虽然两个Spring Context是可以共享的但是两个Spring的配置和加载确实相对独立的，也就是说ContextLoaderListener和 DispatcherServlet两个都会把配置文件声明要加载的东西加载一边，当这个其中一个没有的时候就会去另一个里面查找（这个我没有确认，只是 我猜测的，因为工作忙，这个问题上已经耽误太多时间，所以就没有继续下去。)，当这个里面有就不会去另一个里面找。&lt;/p&gt;
&lt;p&gt;所以，我把配置启动异步 的配置，换到了servlet-context.xml中（也就就是DispatcherServlet），并删掉原来异步配置（这里一定要保证在整个系统中&lt;code&gt;&amp;lt;task:annotation-driven /&amp;gt;&lt;/code&gt;只能出现一次，如果出现两次，或者被加载了两次，Spring就会抛出一个异常指示这个东西只能加载一次），再次重启服务器，上传文件，OK， 成功了！&lt;/p&gt;</summary><category term="java"></category><category term="sprint"></category><category term="annotation"></category></entry><entry><title>java8的闭包Lambda语句小探</title><link href="http://blog.turbidsoul.me/posts/java8de-bi-bao-lambdayu-ju-xiao-tan.html" rel="alternate"></link><updated>2012-02-14T00:00:00+08:00</updated><author><name>Turbidsoul Chan</name></author><id>tag:blog.turbidsoul.me,2012-02-14:posts/java8de-bi-bao-lambdayu-ju-xiao-tan.html</id><summary type="html">&lt;p&gt;这是我上个礼拜相对较闲的时候自己做的简单测试，应为那天正好在oschina上看到jdk1.8发布了开发者预览版，正好左右没事，就去下了一个，实验了一下java 的闭包。&lt;/p&gt;
&lt;p&gt;java 闭包，也就是Lambda表达式，和python中的lambda是一样的，语法也挺相似：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello, &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;!&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下面我们来看个具体的例子：&lt;/p&gt;
&lt;p&gt;首先定义一个接口:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Lamb&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;str&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之后我们就能在main方法中写下面的代码，编译并运行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Lamb&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello, &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;str&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;aaa&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行结果：
&lt;code&gt;Hello, aaa&lt;/code&gt;
上面是最简单的hello world！&lt;/p&gt;
&lt;p&gt;在看一个多参数的例子:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MathLamb&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// main方法&lt;/span&gt;
&lt;span class="n"&gt;MathLamb&lt;/span&gt; &lt;span class="n"&gt;ml&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ml&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行结果：
&lt;code&gt;3&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;当然除了使用自定义的接口也可以使用jdk自带的接口，我用了一个java.util.Comparable&lt;T&gt;接口，做一个简单的字符串排序：&lt;/p&gt;
&lt;p&gt;具体接口请参看java.util.Comparable&lt;T&gt;官方文档。&lt;/p&gt;
&lt;p&gt;下面是，lambda语句的实现:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// 定义一个字符串List，乱序添加一下简单字符串&lt;/span&gt;
&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;3&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;5&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;4&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;6&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;8&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;7&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// lambda 语句,第二个参数，本来可以是一个Comparable匿名实现，这里用了一个Lambda语句&lt;/span&gt;
&lt;span class="n"&gt;Collections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;s2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;s1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;compareTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s2&lt;/span&gt;&lt;span class="o"&gt;);});&lt;/span&gt;

&lt;span class="c1"&gt;// 打印结果&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行结果：&lt;/p&gt;
&lt;p&gt;1 2 3 4 5 6 7 8&lt;/p&gt;
&lt;p&gt;这三个例子都很简单，但是最近几天都比较忙，没有时间继续研究下去，有点可惜！&lt;/p&gt;</summary><category term="java"></category><category term="lambda"></category><category term="closure"></category><category term="code"></category></entry><entry><title>IText中文处理问题！！！</title><link href="http://blog.turbidsoul.me/posts/itextzhong-wen-chu-li-wen-ti.html" rel="alternate"></link><updated>2012-02-01T00:00:00+08:00</updated><author><name>Turbidsoul Chan</name></author><id>tag:blog.turbidsoul.me,2012-02-01:posts/itextzhong-wen-chu-li-wen-ti.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;这篇文章是很早之前写的，是我在去第一个公司的时候遇到的问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里说的IText中文处理问题，是指两种生成PDF文档是对中文处理的问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;是直接通过从数据库查询或者自己拼接中文字符串生成PDF文档。&lt;/li&gt;
&lt;li&gt;第二种是将一个HTML文档转换成PDF文档时的中文处理。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;首先说第一种：
    这种很简单，我们只需为加上这样一句：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;BaseFont&lt;/span&gt; &lt;span class="n"&gt;bf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BaseFont&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;createFont&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;STSong-Light&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;UniGB-UCS2-H&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;BaseFont&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;NOT_EMBEDDED&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在之后的给Document添加节点是为Paragraph设置字体时设置成BF就可以，如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Paragraph&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;混沌之神&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Font&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bf&lt;/span&gt;&lt;span class="o"&gt;)));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;源码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; * 生成PDF文件解决中文的例子&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; * @throws DocumentException&lt;/span&gt;
&lt;span class="cm"&gt; * @author &amp;lt;b&amp;gt;Innate Solitary&amp;lt;/b&amp;gt;&amp;lt;br /&amp;gt;&lt;/span&gt;
&lt;span class="cm"&gt; *         创建时间：&amp;lt;b&amp;gt;2008-6-4 下午09:47:37&amp;lt;/b&amp;gt;&amp;lt;br /&amp;gt;&lt;/span&gt;
&lt;span class="cm"&gt; * @throws IOException&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;pdfWriter&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;DocumentException&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Document&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Document&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;PdfWriter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FileOutputStream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;g:\\Hello.pdf&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;BaseFont&lt;/span&gt; &lt;span class="n"&gt;bf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BaseFont&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;createFont&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;STSong-Light,Bold&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;UniGB-UCS2-H&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;BaseFont&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;NOT_EMBEDDED&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;open&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Paragraph&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;混沌之神&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Font&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bf&lt;/span&gt;&lt;span class="o"&gt;)));&lt;/span&gt;
    &lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Paragraph&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;混沌之神&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Font&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bf&lt;/span&gt;&lt;span class="o"&gt;)));&lt;/span&gt;
    &lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第二种有个要求是你给的HTML文档必须XHTML文档，格式必须正确，不正确就会报解析HTML文件错误。
我在解决这个问题的时候在网上看到有人给的解决方法是修改IText中的SAXiTextHandler类的源码，在里面加上一句设置BaseFont的一句话，我测试了这样确实可行，同时也想提出这个解决方法的人致敬，他对IText理解很深入。&lt;/p&gt;
&lt;p&gt;我们经理找到一个不用修改源码的解决方法，方法如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;  * 将HTML文档转换成PDF文档的中文处理的例子&lt;/span&gt;
&lt;span class="cm"&gt;  *&lt;/span&gt;
&lt;span class="cm"&gt;  * @throws Exception&lt;/span&gt;
&lt;span class="cm"&gt;  * @author &amp;lt;b&amp;gt;Innate Solitary&amp;lt;/b&amp;gt;&amp;lt;br /&amp;gt;&lt;/span&gt;
&lt;span class="cm"&gt;  *         创建时间：&amp;lt;b&amp;gt;2008-6-5 下午09:41:22&amp;lt;/b&amp;gt;&amp;lt;br /&amp;gt;&lt;/span&gt;
&lt;span class="cm"&gt;  */&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;html2pdf&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;htmlPath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;g:\\test.html&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Document&lt;/span&gt; &lt;span class="n"&gt;doc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Document&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;BaseFont&lt;/span&gt; &lt;span class="n"&gt;bf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BaseFont&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;createFont&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;STSong-Light,Bold&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;UniGB-UCS2-H&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;BaseFont&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;NOT_EMBEDDED&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;SAXParser&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SAXParserFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;newInstance&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;newSAXParser&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;PdfWriter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FileOutputStream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;g:\\test.pdf&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;SAXmyHtmlHandler&lt;/span&gt; &lt;span class="n"&gt;saxHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SAXmyHtmlHandler&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bf&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;htmlPath&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="n"&gt;saxHandler&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的是源码，我将源码解释一下。
IText之所以会在处理HTML转换PDF是出错，是因为他的内部没有设置中文编码的字体转换，
即没有这三句：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;BaseFont&lt;/span&gt; &lt;span class="n"&gt;bf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BaseFont&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;createFont&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;STSong-Light&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;UniGB-UCS2-H&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BaseFont&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;NOT_EMBEDDED&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;SAXmyHtmlHandler&lt;/span&gt; &lt;span class="n"&gt;saxHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SAXmyHtmlHandler&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bf&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;htmlPath&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="n"&gt;saxHandler&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;所以我们只需要将代码改成上面那样，就可以解决中文问题。
这里的SAXParser 是标准的DOM内的SAX解析器，没有测试其他的XML解析器可以处理这里不&lt;/p&gt;</summary><category term="itext"></category><category term="java"></category><category term="code"></category></entry><entry><title>树，morphia，查询，优化和擦屁股！</title><link href="http://blog.turbidsoul.me/posts/shu-morphiacha-xun-you-hua-he-ca-pi-gu.html" rel="alternate"></link><updated>2012-01-13T00:00:00+08:00</updated><author><name>Turbidsoul Chan</name></author><id>tag:blog.turbidsoul.me,2012-01-13:posts/shu-morphiacha-xun-you-hua-he-ca-pi-gu.html</id><summary type="html">&lt;p&gt;前天和昨天一直都在忙后台CMS树的优化和一些bug的修改，不过主要精力放在了树的优化上。&lt;/p&gt;
&lt;p&gt;后台数据较多的树有两个，都是和视频相 关的，我们的树用的是dwz的树，但是这是一个同步树，也就是说，这个树是一次性取出数据，通过freemarker构建成html代码，然后在由dwz 渲染成树，在数据量小的时候还不觉得有什么，但是数据量一大就会发现，后台服务端数据查询还不用什么，但是dwz渲染那是一个慢啊，后来我一个同事找了个 jquery的一个异步树，然后由我来对树进行更换。&lt;/p&gt;
&lt;p&gt;在换掉dwz的树之后发现，虽然加载数据的速度提升很大，但是在某些数据量略大的节点上依然会有查询很慢的问题，长一点的有要到7－8秒的时间。这样长的时间主要是因为3个方面：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一个就是dwz的树是同步树，在接收完数据之后，才进行树的渲染，在数据量略微大的话，渲染的效率就很低，而且我们的树是5级的，五层循环下来，基本上要循环过百万次，在firefox和chrome下测试发现，虽然chrome的js渲染速度快，但是效果并不明显&lt;/li&gt;
&lt;li&gt;第二个就是mongodb的问题，但是问题不在与mongodb上，而在于我们的查询上，几个树加载慢的表都冗余了大量的数据，这些数据在树的显示上都没有用，一个树需要的只有一个id和name两个字段，所以在查询上带出了太多的无用数据。&lt;/li&gt;
&lt;li&gt;第三个就是在网络传输上，这个问题其实和第二个是一样的，从mongodb带出了太多的无用数据，而且是一次性全部数据都查寻来，这样就会造成数据越多查询越慢，网络的传输上压力就越大，到最后就是服务器崩掉&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;解 决这问题其实很简单，对症下药而已，dwz是同步树，那就换成异步树，每次只加载点击节点下的数据，mongodb查询带出了大量无用的冗余数据，但是我 们只用了id和name那就在查询的时候只查出id和name，morphia的Query有个方法retrievedFields方法（参数的说明请参看&lt;a href="http://code.google.com/p/morphia/"&gt;API文档或者源代码&lt;/a&gt;），这个方法可以查询的时候只抓取想要的字段，这样不但可以减少在mongodb查询时间，同时也减小了网络传输的时间。&lt;/p&gt;
&lt;p&gt;我 现在无法给出具体的时间数据，因为我手上没有未优化的代码，但是在优化之前我清楚的记得，生成一次树的时间是几十秒甚至几分钟，加了异步树之后每次只加载 当前点击的节点，所以体验上好了很多，但是在打开节点下的时候，因为数据量有点大（大概有1k行的样子），虽然看着不多，但是这个表冗余了很多数据，说是 一千行，但是实际的数据可能会多几十倍，甚至过百倍，所以在只抓取id和name的时候，数据提升了很大，从8－15秒提升到了40－80ms，当然这里 面数值下线都是在chrome中测试的结果，在这里不得不在此赞叹一下V8引擎，真的是太TMD的快了。&lt;/p&gt;
&lt;p&gt;在最后的吐槽中，我实在是想骂娘，这代码是谁写的，让哥抗了一天没吃饭，一直到下午6点才做完去吃饭，饿死哥了！&lt;/p&gt;</summary><category term="java"></category><category term="morphia"></category><category term="mongo"></category><category term="code"></category></entry><entry><title>关于Morphia在存储冗余类的时候出现的一个问题？</title><link href="http://blog.turbidsoul.me/posts/guan-yu-morphiazai-cun-chu-rong-yu-lei-de-shi-hou-chu-xian-de-yi-ge-wen-ti.html" rel="alternate"></link><updated>2012-01-05T00:00:00+08:00</updated><author><name>Turbidsoul Chan</name></author><id>tag:blog.turbidsoul.me,2012-01-05:posts/guan-yu-morphiazai-cun-chu-rong-yu-lei-de-shi-hou-chu-xian-de-yi-ge-wen-ti.html</id><summary type="html">&lt;p&gt;昨天中午临吃午饭前，我对系统的业务功能代码进行重构之后，准备测试一下，通过就去吃饭，但是发生了一个让我很意外的问题，就是在存储的时候，系统 报出来，类型转换异常（&lt;code&gt;java.lang.ClassCaseException&lt;/code&gt;）或者是这么一个错误信息（&lt;code&gt;object is not an instance of declaring class&lt;/code&gt;），很纠结因为之前这里测试都好好的，而且给内容组，视频组和测试组部署的测试环境，还在正常运行，一时想不通那里出了问题。&lt;/p&gt;
&lt;p&gt;在 经过几次debug跟踪之后发现，每次报错都是在，存储FreeCourse和FreeVideo两个类是发生的问题，我仔细回忆 了，从上次重部署测试环境到出问题之间修改的代码，中间都没有什么问题，只有一个地方和其他人写的代码略有不一样，就是：其他人在写list类型的属性 时，默认是给空值的，但是我会给他们new一个size为0的ArrayList，这是我的一个喜欢，是为了避免出现一些因为疏忽而发生的问题，但是如果 只是这样不应该会有问题。&lt;/p&gt;
&lt;p&gt;我 又仔细的看了一边相关业务代码和实体类的代码，所有代码中都没有问题，但是有一点和其他人的不同，就是我的FreeVideo下有个字段 videoInfos他的类型是&lt;code&gt;List&amp;lt;VideoInfo&amp;gt;&lt;/code&gt;，而VideoInfo只有一个地方和其他的实体类不一样，就是没有去继承实 体类的基类MongoBaseEntity，但是这样也不应该有问题，但是问题应该和存储VideoInfo有关。&lt;/p&gt;
&lt;p&gt;刚刚忘记说了我们系统 的 基本情况，现在这里简单的补充一下，我们使用的是mongodb，使用morphia做mongodb的数据操作，为了方便数据的查询，我在 FreeCourse冗余了FreeVideo，在FreeVideo冗余VideoInfo，FreeCourse包含多个 FreeVideo，FreeVideo包含多个VideoInfo，是个3层的1对多关系。&lt;/p&gt;
&lt;p&gt;所以我继续深入的跟踪在存储 FreeCourse和FreeVideo时存储VideoInfo时的情况，在跟踪到存储冗余的VideoInfo时发现，在存储的时候回去调用一些方 法，这些方法的功能是处理BigDecimal，但是在VideoInfo中没有这些方法，而是在MongoBaseEntity中有这些方法，且这些方 法都加了&lt;code&gt;@PrePersist&lt;/code&gt;，&lt;code&gt;@PostPersist&lt;/code&gt;，&lt;code&gt;@PreLoad&lt;/code&gt;等注解，也就是说只有继承了MongoBaseEntity的实体在存储前 后会调用这些方法，但是VideoInfo并没有继承MongoBaseEntity拿也就不应该调用这些方法啊，什么会去调用这些方法的？这个问题让我 很疑惑！&lt;/p&gt;
&lt;p&gt;在几次跟踪之后融然无果的情况下，去找了我的头（也就是我们的技术经理），他也用同样的方法得到了同样的结论，但是他之后又跟踪 了 在服务器启动的时候Morphia对实体类的加载情况（不得不佩服下俺头，俺为啥就么想到呢）在跟踪Morphia在启动时对实体类的加载的时候发 现，Morphia会对每个实体类添加被注解的那些方法，而对非MongoBaseEntity子类则不处理，但是有个很奇怪地方我没有理解&lt;code&gt;com.google.code.morphia.mapping.MappedClass&lt;/code&gt;的134行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Class&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;lifecycleClasses&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Method&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ReflectionUtils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getDeclaredAndInheritedMethods&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Class&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;?&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Annotation&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;lifecycleAnnotations&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isAnnotationPresent&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;addLifecycleEventMethod&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clazz&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在调用addLifecycleEventMethod的时候最后一个参数一定是空，虽然不知道是不是这个地方的问题，但是觉得很奇怪，我们先不管这里，先继续下去，在后面的跟踪当中并没有看到morphia为VideoInfo添加MongoBaseEntity中的注解方法，到这里发现貌似错误和morphia的实体类加载没有关系，拿是那里的问题呢？不得以我们有回到原点，再次跟踪了在存储FreeCourse代码，这次有一个被之前忽略的问题！&lt;/p&gt;
&lt;p&gt;在跟踪到com.google.code.morphia.mapping.MappedClass的904行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;callLifecycleMethods&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PostPersist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ent&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dbO&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mapr&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;即上面哪行代码的时候，有两个参数让我注意到，第一个是entity他是FreeCourse，第二个是ent他缺失VideoInfo，在进入callLiftcycleMoethods方法内,跟踪到306行有下面两张截图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="FzwYz" src="/file/images/FzwYz.png" /&gt;
&lt;img alt="KSLXG" src="/file/images/KSLXG.png" /&gt;&lt;/p&gt;
&lt;p&gt;下面两个图第一个是method.invoke方法的entity参数的值是VideoInfo，第二章图是method那个方法在调用，可以看到是MongoBaseEntity下的注解方法，也就是处理数据存储前后的事件方法。这里的VideoInfo是FreeCourse下冗余的FreeVideo下冗余的VideoInfo的数据。&lt;/p&gt;
&lt;p&gt;从这里可以看到，morphia在存储冗余数据的时候，回去调用其上层类的注解方法，但是却是在使用method的invoke方法进行调用，并没有处理如果被冗余的实体如果没有次注解方法的问题，所以抛出了一个类型异常，在之后的测试发现这个异常并不影响morphia的存储，数据依然可以正确的保存到数据库中，不明白morphia为什么要这么做，既然没有影响存储，为什么还要抛出一个异常，难道只是为了提醒使用者，这样的结构是一个危险的方法，需要使用者自己进行处理？不管是什么原因，我最后的解决办法是为VideoInfo继承了MongoBaseEnity这样就不会在报出那个异常了。&lt;/p&gt;</summary><category term="java"></category><category term="morphia"></category><category term="code"></category><category term="mongo"></category></entry></feed>